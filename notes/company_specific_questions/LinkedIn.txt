1. Can I Win [M]
------------------
In the "100 game," two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins.
What if we change the game so that players cannot re-use integers?
For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total >= 100.
Given an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move can force a win, assuming both players play optimally.
You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.

Example

Input:
maxChoosableInteger = 10
desiredTotal = 11

Output:
false

Explanation:
No matter which integer the first player choose, the first player will lose.
The first player can choose an integer from 1 up to 10.
If the first player choose 1, the second player can only choose integers from 2 up to 10.
The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.
Same with other integers chosen by the first player, the second player will always win.

Answer:
We dont know what the optimal solution is. So we need to let a player choose all the values in remaining pool of integers at each point. For an int value, for which the other player looses, then becomes the optimal move for the player at this level.

mistakes:
		1. Chose to go with approach of selecting every possible combination, but representation of the
		state of program wasnt very accurate. That prevented from thinking in memoization direction for
		optimization.
		2. Improved and clear representation helped me in memoization and thus forming proper recursion.
		3. Key: We dont know what the optimal solution is. So we need to let a player choose all the values in remaining pool of integers at each point. For an int value, for which the other player looses, then becomes the optimal move for the player at this level.
		4. Although i was able to get the problem correct with memoization, to get it accepted in leetcode, it
		had to be changed to use Int as key instead of String: due to strick time bounds. Although, this doesnt improve on my time complexity, it improves on time execution.


2. Minimum Window Substring [H]
------------------------------------
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, return the empty string "".
If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.

Answer:
Use two pointers left and right. first advance right pointers till we have captured all the chars. We got a window.
Now advance the left pointer thus reducing the window. If we find one of the chars have gone out of curr window,
then advance the right to try and capture the character again. Repeat this process, everytime
noting down the min of windows. At the end, we should have found our minimum window.


3. Merge k Sorted Lists [H]
------------------------------------
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Answer: Use k size min heap.
Mistakes: During amazon interview, took a long time coming up with this solution.

4. Serialize and Deserialize Binary Tree [h]
------------------------------------------
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.

Answer: Pre-order traversal and mark null child with 'X'. To deserialize, first one would be root. Then recursively call deserialize
on rest of the list to get left and right children. When hit with 'X' return null.

5. Maximum Product Subarray [M]
------------------------------
Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.

Answer: Its little difficult to come up with the solution. General approach is to maintain
max and min at each index. Why min? well when we have 2 -ves in array, just maintaining
max, would make us "forget" about the real max.
Example: Consider following where we only maintain max
    2 -2 -1
mx  2 -2 -1
So max would be 2, but the ans is 4
Now if we maintain min also
    2 -2 -1
mx  2 -2  4 <-- min from -2 helped in calculating real max.
mn  2 -4 -1

if(A[i] < 0 ): swap(mx[i-1], mn[i-1])
mx[i] = max(A[i], A[i] * mx[i - 1])
mn[i] = min(A[i], A[i] * mn[i - 1])

Mistakes:
1. jumped to solution too early. didnt consider 2 negatives
2. bumped into the correct idea while brainstorming, but didnt approach it with positive attitude,
again pre-maturely concluded it wont work

6. Pow(x, n) [M]
-------------
Implement pow(x, n).

Approach tried:
a. divide and rule: calculate pow of x for i < n and then merge the result.
pow(x, n) = pow(x, n/2) * pow(x, n/2)
and used memoization to store the results.

mistakes:
- didnt account for negative power, actually didnt even occur to me
- for result array didnt consider upper bound, which would mean allocating lot of unnecessary space

Answer:
Although above approach is correct, it didnt meet tighter time bounds for leetcode.
If n is even i.e. 6 then n/2 = 3. Calculating pow(x,3) is enough to get pow(x,6): pow(x,3) * pow(x,3).
The reason I bended towards memoization was to handle odd powers. n = 7, n/2 = 3 but i need to also calculate
pow(x,4) in a separate recursion tree.
But the simple solution for odd powers is: pow(x,n/2) * pow(x,n/2) * x. In above example it would be
pow(x,3) * pow(x,3) * x = pow(x,7)

7. Evaluate Reverse Polish Notation [M]
---------------------------------------
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6

Answer:
solve using stack
If digit:
    push to stack
If operator:
    pop last 2 values on stack
    use the operator on these two values
    push the new value to stack

Finally, stack would have only one value, return this value.

Kudos: Was able to crack this in single blow :)

Mistakes: FLAWLESS VICTORY

8. Merge Intervals [M]
---------------------
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

Solution:
The idea is to sort the intervals by their starting points. Then, we take the first interval and compare its end
with the next intervals starts. As long as they overlap, we update the end to be the max end of the overlapping
intervals. Once we find a non overlapping interval, we can add the previous "extended" interval and start over.
Sorting takes O(n log(n)) and merging the intervals takes O(n). So, the resulting algorithm takes O(n log(n)).

Mistakes:
- unnecessarily complicated simple solution

9. Insert Interval [H]
------------------------
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].
This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10]

Solution:
curr -> each interval in intervals
while(curr.end < newInterval.start): // example: curr = [1,2] and newInterval = [4,9]
        move ahead because merged range if any is ahead of curr
        why? because newInterval cant be merged with curr
// when we are here, it means
either we are done with all the intervals -> append the newInterval and return the result
OR
we have found a curr where curr.end >= newIntervals.start
while(curr.start <= newInterval.end):
    merge.start = min(merge.start, curr.start, newInterval.start)
    merge.end = max(merge.end, curr.end, newInterval.end)
if we couldn't merge it means last element in intervals: last.start > newInterval.end
example: intervals  [[1,5]], newInterval = [0,0], expectedAns = [[0,0],[1,5]]
i.e. the newInterval lies before the start of the interval list, so prepend the newInterval

mistakes:
1. didn't consider cases
    a. newInterval coming before start of interval list
    b. newInterval coming after end of interval list
2. for merging newInterval into lists, didn't understand "out of range" concept clearly in the first pass

10. Serialize and Deserialize Binary Tree [H]
------------------------------------------------
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored
in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or
another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your
serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized
to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree.
You do not necessarily need to follow this format, so please be creative and come up with different
approaches yourself.

Mistakes:
Learning: Although using json format for serializing and deserializing is a good way, writing it
 * in a time bound interview is really difficult. Also, parsing would require lot of testing and
 * there are higher chances of bug.
 * !Tried writing a parser: took around 50 mins but still couldnt get away with bugs.

Solution:
The idea is simple: print the tree in pre-order traversal and use "X" to denote null node and split node with ",".
We can use a StringBuilder for building the string on the fly. For deserializing, we use a Queue to store the
pre-order traversal and since we have "X" as null node, we know exactly how to where to end building subtress.

11. Can I Win [H] ( Was also asked in onsite interview: 2014 )
---------------------------------------------------------------

Problem:
In the "100 game," two players take turns adding, to a running total, any integer from 1..10. The player who
first causes the running total to reach or exceed 100 wins.
What if we change the game so that players cannot re-use integers?

For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement
until they reach a total >= 100.
Given an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move
can force a win, assuming both players play optimally.
You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger
than 300.

Example

Input:
maxChoosableInteger = 10
desiredTotal = 11

Output:
false

Explanation:
No matter which integer the first player choose, the first player will lose.
The first player can choose an integer from 1 up to 10.
If the first player choose 1, the second player can only choose integers from 2 up to 10.
The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.
Same with other integers chosen by the first player, the second player will always win.

Mistakes:
1. Chose to go with approach of selecting every possible combination, but representation of the
state of program wasnt very accurate. That prevented from thinking in memoization direction for
optimization.
2. Improved and clear representation helped me in memoization and thus forming proper recursion.
3. Key: We dont know what the optimal solution is.
So we need to let a player choose all the values in remaining pool of integers at each point.
For an int value, for which the other player looses, then becomes the optimal move for the player
at this recursion/decision level.
4. Although i was able to get the problem correct with memoization, to get it accepted in leetcode, it
had to be changed to use Int as key instead of String: due to strick time bounds. Although, this doesnt
improve on my time complexity, it improves on time execution.

actually i did start the solution starting in right direction, but the optimal selection threw me off

Solution:
Recursion can be used to represent decision making at each level. At each level of decision/recursion, the player
gets to iterate over all the possible remaining choices (integer selection) and call the next level / or
next player plays with remaining total value.
Thus at each level a decision is being made: Given these choice, can a player win. Since this question is agnostic
of player playing it, this is the basis of memoization.
Used "usedBits" to generate hash for remaining choices. "usedBools" is used to mark un-used integeres.
Base Case: If remainingTotal is <=0, it means earlier player played a move/selected an integer that hit or exceeded
the desiredTotal. Thus return false.
Recurrence Relation: If one of the choice resulted in winning of the player ( i.e. next level resulted false ),
then the move qualifies as optimal move. So the iteration can be short-circuited and method can return true.

12. Search for a Range [M]
----------------------------------------

Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

Solution:
Since, the array is sorted run a binary search and then iterate in either direction to find the range.

Mistakes:
FLAWLESS VICTORY

13. Repeated DNA Sequence [M]
-----------------------------
All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG".
When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.
Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

For example,
Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",

Return:
["AAAAACCCCC", "CCCCCAAAAA"].

Solution: Create a 10 char sliding window. As the window is sliding, check the occurrence in cache, if its not
add it, if found then we have our duplicate.

Mistakes:

14. Binary Tree Zigzag Level Order Traversal [M]
------------------------------------------------
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right,
then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

Solution:
Do level order traversal and then reverse alternate levels.

15. Search for a Range [M]
---------------------------
Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

Solution:
Perform binary search.
    If index found: iterate in either direction to find left and right end
    If not found: return [-1, -1]

Mistakes:
FLAWLESS VICTORY

