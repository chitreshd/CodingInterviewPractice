1. Clone Graph [M]
-----------------
Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/

Ans: Use BFS/DFS to traverse the graph. At each visit, clone the node(i.e. create a clone object and mark all its
neighbors) and its neighbors. Add cloned neighbors to cloned node.
Careful: Multiple clone of one node shouldn't be created.
Mistakes:
a. Assumed by simply traversing DFS / BFS clone will be created. Initially, ignored the importance of keeping
unique clones for each node.
b. For visited DS, I used set and a separate map for maintaining unique relationships between label and map. The
optimization was to use map to maintain relationship and also as a visited DS.

2. Binary Tree Paths [E]
---------------------
Given a binary tree, return all root-to-leaf paths.

For example, given the following binary tree:

   1
 /   \
2     3
 \
  5
All root-to-leaf paths are:

["1->2->5", "1->3"]

Ans: Pre-order tree traversal. Keep passing ancestors to children. At each level check for leaf. If leaf, then print.
Careful: Maintenance of ancestral links.

3. Find Median from Data Stream [H]
--------------------------------
Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

Examples:
[2,3,4] , the median is 3

[2,3], the median is (2 + 3) / 2 = 2.5

Design a data structure that supports the following two operations:

void addNum(int num) - Add a integer number from the data stream to the data structure.
double findMedian() - Return the median of all elements so far.
For example:

addNum(1)
addNum(2)
findMedian() -> 1.5
addNum(3)
findMedian() -> 2

Ans: Maintain 2 heaps: Left heap which is max heap and right heap which is min. Also always left > right by one or
left == right. The median is:
if left > right: median = left.head ( max of left side: ex: 1,2,3,4,5. left = 1,2,3, median = 3)
if left == right: median = left.head + right.head / 2. (ex: 1,2,3,4; left = 1,2, right=3,4 left.max = 2,
right.min = 3, median = 2 + 3 / 2)

4. Implement Trie [M]
---------------------
Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.

Ans: For strings: [ abc, ac, bac, ace ] , create a tree like following:
                # ( root node empty )
             /      \
          a             b
        /  \            |
      b     c(w)        a
      |     |           |
      c(w)  e(w)        c(w)


5. Maximum Product of Word Lengths [M]
--------------------------------------
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not
share common letters. You may assume that each word will contain only lower case letters. If no such two words exist,
return 0.

Example 1:
Given ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]
Return 16
The two words can be "abcw", "xtfn".

Example 2:
Given ["a", "ab", "abc", "d", "cd", "bcd", "abcd"]
Return 4
The two words can be "ab", "cd".

Example 3:
Given ["a", "aa", "aaa", "aaaa"]
Return 0
No such pair of words.

Ans: a. Sort the words by length. b. create char set for each word. c. iterate over list of char sets to identify
    which pair produces max product. O(n^2)
Mistake: An optimization can be to use char masks instead of char set in step b.
Example: "abc", set: [a,b,c], char mask using int (binary representation): 000111
         "def", set: [d,e,f], char mask using int (binary representation): 111000

         Now comparison for dissimilarity is just a matter of (000111 & 111000 == 0) which is much faster than
         checking each char in other set.
Gotcha: Consider maskSet for identifying dissimilarities

6. Wiggle Sort
-----------------
Given an unsorted array nums, reorder it in-place such that nums[0] <= nums[1] >= nums[2] <= nums[3]....

For example, given nums = [3, 5, 2, 1, 6, 4], one possible answer is [1, 6, 2, 5, 3, 4].

Ans: Thus the problem is that all the odd index numbers should be greater than its adjacent even index numbers.
Iterate over the array:
    if the index is odd: if nums[i-1] > nums[i] : swap
    if the index is even: if nums[i - 1] < nums[i]: swap

Mistake: Initially thought that wiggle in any order is fine. i.e. num[0] > num[1] or num[0] < num[1].
But the problem clearly states the wiggle order. So be cautious of the fine details - or at-least confirm this
assumption

7. Count of Smaller Number After Self: [H]
---------------------------------------
You are given an integer array nums and you have to return a new counts array.
The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].
Example:

Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].

8. Island Permiter [E]
-----------------------

9. Find All Numbers Disappeared in an Array [E]
-----------------------------------------------
Given an array of integers where 1 ? a[i] ? n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]

Ans: In first pass, mark the index corresponding to the value as negative. i.e. in above array n[0] = 4. thus,
mark n[3] as negative. why n[3]? because numbers start from 1.
how to mark negative? n[3] = 7, n[3] = -7
in second pass, look for the indexes that has positive value, let it be x. then x + 1 will be one of the missing
number. how? let x be 1. So if 1 is positive, it means in the array we never saw a value 2, or else we would have
marked n[x - 1] i.e. n[1] as -ve.

Gotchas
1. If the values in an array are bounded, they can be marked using -ve and index can be used as identifier.
2. We need to make sure in the above solution that we dont mark a -ve again -ve thus making it +ve.
3. Also need to be aware of IndexOutOfBounds, hence use math.abs

10. Power of 3[E]
---------------
Given an integer, write a function to determine if it is a power of three.

Follow up:
Could you do it without using any loop / recursion?

Ans: We can solve this using mod. Consider if our max was 30. then all the power of 3 till 30 would be
perfectly divide last power of 3 before 30 i.e. every power of 3 -> 1,3,9 would perfectly divide 27.
Now for int, we find the max power of 3 < Integer.MAX_VALUE, lets call it big. Now all powers will
divide big perfectly. Hence big % n == 0 will be powers of 3.

11. Power of 2[E]
---------------
Given an integer, write a function to determine if it is a power of two.

Ans: Can be solved same as above ( Power of 3 ). Another trick is: for power of 2 only 1 bit is set.
Example: 0001 0010 0100 1000
Thus counting set bits can give the answer.
Alternatively, if n = 2, n = 0010 , then n - 1 = 0001 and n & n - 1 = 00010 & 0001 = 0000
if n = 3, n = 0011 , then n - 1 = 0010 and n & n - 1 = 0011 & 0010 = 0010 i.e. != 0.
so n & (n - 1) can decide the power of 2.
