1. LRU Cache [H]
----------------
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

Solution:
Use 2 data structures. LinkedList for maintaining usage order and HashMap to search existence
of a key in constant time.
- Have to be little careful when maintaining order.
- Will have to store a wrapper node as value in hashmap
- this wrapper node will be used in linkedlist for maintaining order

2. Regular Expression Matching [H]
------------------------------------
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") ? false
isMatch("aa","aa") ? true
isMatch("aaa","aa") ? false
isMatch("aa", "a*") ? true
isMatch("aa", ".*") ? true
isMatch("ab", ".*") ? true
isMatch("aab", "c*a*b") ? true

Solution:
Following solution uses dynamic programming - tabulation method.
Idea:
Let p be pattern and s be text to be matched and j and i to be the
pointers/indexes for each of them respectively.
Also consider a boolean array dp where rows represent each char in s
and columns represent each char in j. so dp[i][j] is match between s till i and p till j.
We need to go to the end of the pattern and string to determine the match.
Why can't i fail fast? Consider s = y and p = x*y now s[0] != p[0], if we fail fast it
would be wrong because pattern says: 0 or more character of x.
Thus we need to carry forward the previously calculated results and move forward.

if p[j] == s[i] || p[j] == '.':
     dp[i][j] = dp[i-1][j-1]
else if p[j] == '*':
     dp[i][j] = dp[i][j - 2] // assumes 0 occurrences of x*
     if p[j - 1] == s[i] || p[j - 1] == '.' // 1 or more occurrences
         dp[i][j] = dp[i][j] | dp[i - 1][j] // 1a: explanation below
     else:
         dp[i][j] = false;

1a:
 Consider p = xa* and s = xaa now for i = 2, j = 2, p[2] == '*'
 and p[j-1] i.e. p[1] == s[2] since, there is a match we would rely or previous results.
 We would like to check if xa* (p) matches xa (s). Hence i - 1, j as indexes.

Regular expression can be expressed as a state machine. Can, suggest this method first
in the interview. It would be much easy to code it and explain it.
Start by creating a state machine for pattern. Then, start feeding the input string
to the pattern state machine.